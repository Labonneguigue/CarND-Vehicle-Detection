@startuml
title Top-level class diagram

class Database {
    + csvFile
    + pickleFileName
    + ...
    + GetOutputVideoPath()
    + GetImageSize()
    + GetImagesAndLabels()
    + GetRandomImage()
    + GetListOfImages()
    + SaveObject()
    + LoadObject()
}

class Renderer {
    + SaveImagesSideBySide(image1, image2, fname[, title1, title2, grayscale])
    + Save3ImagesSideBySide(imgA, imgB, imgC, fname[,titleA, titleB, titleC, grayscale, plots)
    + SaveImage(image, fname)
    + {static} DrawSlidingBoxes(img, bboxes)
    + {static} AggregateViews(views)
}

class Test {
    + TestHOG(image)
    + TestNormalizationFeatures()
    + TestTrainClassifier()
    + TestSlidingWindows()
    + TestClassification()
    + TestHeatMap()
    + TestProcessImagePipeline()
    + RunTests()
}

class VehicleDetector {
    + bool outputToImages
    + string outputVideoName
    + ProcessImage : image
}

class Classifier {
    + float testTrainingRatio
    + int nbOrientations
    + int pixels_per_cell
    + int cells_per_block
    + color_space
    + hist_bins
    + hog_channels
    + Run()
    + RunHOG()
    + ExtractFeatures()
    + TrainClassifier()
}

class Filter {
    + trackedCars[]
    + FilterBBoxes(bBoxes) : bBoxes
}

class Utils {
    + {static} BinSpatial() : features
    + {static} ColorHist() : features
    + {static} GetHOGFeatures() : features
    + {static} ExtractListImagesFeatures() : features
    + {static} ExtractFeatures() : features
    + {static} NormalizeFeatures() : transform(X), X
    + {static} GetSlidingWindows() ; sWindows
}

Test *-- VehicleDetector : owns
Test *-- Renderer : owns
Test *-- Database : owns
Test *-- Classifier : owns

VehicleDetector -- Database : uses
VehicleDetector *-- Classifier
VehicleDetector *-- Filter
VehicleDetector --> Utils : uses
VehicleDetector --> Renderer : uses


@enduml
